trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 2024-02-container-apps/Application

variables:
  - name: containerAppName
    value: app-containerapp20231211
  - name: containerRegistryUrl
    value: crcontainerapp20231211.azurecr.io
  - name: resourceGroupName
    value: rg-containerapp
  - name: applicationFolder
    value: $(Build.Repository.LocalPath)/Application/RemiSolutions
  - name: projectFolder
    value: $(applicationFolder)/RemiSolutions
  - name: containerRepository
    value: containerapp
  - name: buildConfiguration
    value: "Release"
  - name: outputFolder
    value: $(projectFolder)/output/

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: ubuntu-latest

        steps:
          - task: DotNetCoreCLI@2
            displayName: Build & Publish
            inputs:
              command: "publish"
              publishWebProjects: false
              modifyOutputPath: false
              workingDirectory: $(projectFolder)
              arguments: --output $(outputFolder) -c $(buildConfiguration) --self-contained true
              zipAfterPublish: false

          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: AzureContainerRegistry

          - task: Docker@2
            displayName: Build Docker image
            inputs:
              containerRegistry: AzureContainerRegistry
              repository: $(containerRepository)
              command: "build"
              Dockerfile: $(projectFolder)/Dockerfile
              buildContext: $(projectFolder)
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: Push Docker image
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              containerRegistry: AzureContainerRegistry
              repository: $(containerRepository)
              command: "push"
              tags: |
                $(Build.BuildId)
                latest

          - task: CopyFiles@2
            displayName: Copy deployment yaml file
            inputs:
              sourceFolder: $(applicationFolder)
              contents: "deployment.yaml"
              targetFolder: $(Build.ArtifactStagingDirectory)
              overwrite: true

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens
            inputs:
              rootDirectory: $(Build.ArtifactStagingDirectory)
              targetFiles: "deployment.yaml"
              encoding: auto
              writeBOM: true
              escapeType: no escaping
              actionOnMissing: log warning
              tokenPrefix: __
              tokenSuffix: __

          - publish: $(Build.ArtifactStagingDirectory)

  - stage: Deploy
    jobs:
      - deployment: Deploy

        environment:
          name: container-app

        pool:
          vmImage: "ubuntu-latest"

        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2

                - task: AzureContainerApps@1
                  inputs:
                    azureSubscription: AzureSubscription
                    containerAppName: $(containerAppName)
                    resourceGroup: $(resourceGroupName)
                    yamlConfigPath: $(Pipeline.Workspace)/deployment.yaml
